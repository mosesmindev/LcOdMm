# D07 双指针--相向双指针
# 相向双指针（两个指针从两边往中间移动）：两个指针 一个从左到右移动 一个从右到左移动
# 即：两个指针向内移动 它们的方向是相向的 在移动过程中 这两个指针会产生碰撞的结果 也即所谓的对撞指针
# 相向双指针会考的比较多 而背向双指针（两个指针从中间往两边移动）基本不考  且题目量非常少

# --------------------------------- D07-01 --------------------------------- 00
# LC9. 回文数
# 一、题目描述
# 给你一个整数 x ，如果 x 是一个回文整数，返回 true ；否则，返回 false 。
# 回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。
# - 例如，121 是回文，而 123 不是。
# 示例 1：
# 输入：x = 121
# 输出：true
# 示例 2：
# 输入：x = -121
# 输出：false
# 解释：从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。
# 示例 3：
# 输入：x = 10
# 输出：false
# 解释：从右向左读, 为 01 。因此它不是一个回文数。
# 二、题目解析
#
# 三、参考代码
# class Solution:
#     def isPalindrome(self, x: int) -> bool:
#
#         # 转换为字符串数组的形式
#         xArray = list(str(x))
#
#         # 左边索引的位置在 0
#         left = 0
#
#         # 右边索引的位置在 len(xArray) - 1
#         right = len(xArray) - 1
#
#         # 两个索引向内移动
#         # left 向右移动
#         # right 向左移动
#         while left <= right:
#             # 判断这两个元素值是否相同
#             if xArray[left] != xArray[right]:
#                 # 如果不同，直接返回 False
#                 return False
#
#             # 否则，left 向右移动
#             left += 1
#
#             # right 向左移动
#             right -= 1
#
#         return True


# --------------------------------- D07-02 --------------------------------- 00
# LC125. 验证回文串
# 本题和 LC9. 回文数  的解题思路是一样的。
# 一、题目描述
# 如果在将所有大写字符转换为小写字符、并移除所有非字母数字字符之后，短语正着读和反着读都一样。
# 则可以认为该短语是一个 回文串 。
# 字母和数字都属于字母数字字符。
# 给你一个字符串 s，如果它是 回文串 ，返回 true ；否则，返回 false 。
# 示例 1：
# 输入: s = "A man, a plan, a canal: Panama"
# 输出：true
# 解释："amanaplanacanalpanama" 是回文串。
# 示例 2：
# 输入：s = "race a car"
# 输出：false
# 解释："raceacar" 不是回文串。
# 示例 3：
# 输入：s = " "
# 输出：true
# 解释：在移除非字母数字字符之后，s 是一个空字符串 "" 。
# 由于空字符串正着反着读都一样，所以是回文串。
# 提示：
# - 1 <= s.length <= 2 * 10^5
# - s 仅由可打印的 ASCII 字符组成
# 二、题目解析
#
# 三、参考代码

# class Solution:
#     def isPalindrome(self, s: str) -> bool:
#
#         # isalnum() 方法检测字符串是否由字母和数字组成
#         # 转换为字符串数组的形式
#         xArray = "".join(ch.lower() for ch in s if ch.isalnum())
#
#         # 左边索引的位置在 0
#         left = 0
#
#         # 右边索引的位置在 len(xArray) - 1
#         right = len(xArray) - 1
#
#         # 两个索引向内移动
#         # left 向右移动
#         # right 向左移动


#         while left <= right:
#             # 判断这两个元素值是否相同
#             if xArray[left] != xArray[right]:
#                 # 如果不同，直接返回 False
#                 return False
#
#             # 否则，left 向右移动
#             left += 1
#
#             # right 向左移动
#             right -= 1
#
#         return True



# --------------------------------- D07-03 --------------------------------- 00




